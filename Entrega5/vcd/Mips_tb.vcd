$date
	Wed Jun  4 23:48:40 2014
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Mips_tb $end
$var wire 16 ! data [15:0] $end
$var reg 18 " addr [17:0] $end
$var reg 1 # chip_en $end
$var reg 1 $ clk $end
$var reg 1 % hb_mask $end
$var reg 1 & lb_mask $end
$var reg 1 ' oute $end
$var reg 1 ( rst $end
$var reg 1 ) wre $end
$scope module RAM $end
$var wire 18 * addr [17:0] $end
$var wire 1 + chip_en $end
$var wire 16 , data [15:0] $end
$var wire 1 - hb_mask $end
$var wire 1 . lb_mask $end
$var wire 1 / oute $end
$var wire 16 0 q [15:0] $end
$var wire 1 1 wre $end
$var reg 16 2 d [15:0] $end
$upscope $end
$scope module MIPS $end
$var wire 18 3 addr [17:0] $end
$var wire 1 + chip_en $end
$var wire 1 4 clock $end
$var wire 16 5 data [15:0] $end
$var wire 1 6 ex_if_stall $end
$var wire 1 7 ex_mem_readmem $end
$var wire 32 8 ex_mem_regb [31:0] $end
$var wire 5 9 ex_mem_regdest [4:0] $end
$var wire 1 : ex_mem_selwsource $end
$var wire 32 ; ex_mem_wbvalue [31:0] $end
$var wire 1 < ex_mem_writemem $end
$var wire 1 = ex_mem_writereg $end
$var wire 1 - hb_mask $end
$var wire 3 > id_ex_aluop [2:0] $end
$var wire 32 ? id_ex_imedext [31:0] $end
$var wire 1 @ id_ex_readmem $end
$var wire 32 A id_ex_rega [31:0] $end
$var wire 32 B id_ex_regb [31:0] $end
$var wire 5 C id_ex_regdest [4:0] $end
$var wire 1 D id_ex_se $end
$var wire 1 E id_ex_selalushift $end
$var wire 1 F id_ex_selimregb $end
$var wire 1 G id_ex_selwsource $end
$var wire 5 H id_ex_shiftamt [4:0] $end
$var wire 2 I id_ex_shiftop [1:0] $end
$var wire 1 J id_ex_unsig $end
$var wire 1 K id_ex_writemem $end
$var wire 1 L id_ex_writeov $end
$var wire 1 M id_ex_writereg $end
$var wire 32 N id_if_pcimd2ext [31:0] $end
$var wire 32 O id_if_pcindex [31:0] $end
$var wire 32 P id_if_rega [31:0] $end
$var wire 1 Q id_if_selpcsource $end
$var wire 2 R id_if_selpctype [1:0] $end
$var wire 5 S id_reg_addra [4:0] $end
$var wire 5 T id_reg_addrb [4:0] $end
$var wire 32 U if_id_instruc [31:0] $end
$var wire 32 V if_id_nextpc [31:0] $end
$var wire 18 W if_mc_addr [17:0] $end
$var wire 1 X if_mc_en $end
$var wire 1 . lb_mask $end
$var wire 32 Y mc_if_data [31:0] $end
$var wire 18 Z mc_ram_addr [17:0] $end
$var wire 1 [ mc_ram_wre $end
$var wire 18 \ mem_mc_addr [17:0] $end
$var wire 32 ] mem_mc_data [31:0] $end
$var wire 1 ^ mem_mc_en $end
$var wire 1 _ mem_mc_rw $end
$var wire 5 ` mem_wb_regdest [4:0] $end
$var wire 32 a mem_wb_wbvalue [31:0] $end
$var wire 1 b mem_wb_writereg $end
$var wire 1 / oute $end
$var wire 32 c reg_id_ass_dataa [31:0] $end
$var wire 32 d reg_id_ass_datab [31:0] $end
$var wire 32 e reg_id_dataa [31:0] $end
$var wire 32 f reg_id_datab [31:0] $end
$var wire 1 g reset $end
$var wire 5 h wb_reg_addr [4:0] $end
$var wire 32 i wb_reg_data [31:0] $end
$var wire 1 j wb_reg_en $end
$var wire 1 1 wre $end
$var reg 1 k clock_div $end
$var integer 32 l contador0 [31:0] $end
$var integer 32 m contador1 [31:0] $end
$scope module MEMCONTROLLER $end
$var wire 1 4 clock $end
$var wire 18 n if_mc_addr [17:0] $end
$var wire 1 X if_mc_en $end
$var wire 32 o mc_if_data [31:0] $end
$var wire 18 p mc_ram_addr [17:0] $end
$var wire 16 q mc_ram_data [15:0] $end
$var wire 1 [ mc_ram_wre $end
$var wire 18 r mem_mc_addr [17:0] $end
$var wire 32 s mem_mc_data [31:0] $end
$var wire 1 ^ mem_mc_en $end
$var wire 1 _ mem_mc_rw $end
$var wire 1 g reset $end
$var integer 32 t cont [31:0] $end
$var reg 16 u data1 [15:0] $end
$var reg 32 v data2 [31:0] $end
$var reg 32 w data3 [31:0] $end
$var reg 18 x ram_addr [17:0] $end
$var reg 1 y zero $end
$scope module dut $end
$var wire 18 z addr [17:0] $end
$var wire 1 { chip_en $end
$var wire 16 | data [15:0] $end
$var wire 1 { hb_mask $end
$var wire 1 { lb_mask $end
$var wire 1 } oute $end
$var wire 16 ~ q [15:0] $end
$var wire 1 [ wre $end
$var reg 16 !" d [15:0] $end
$upscope $end
$upscope $end
$scope module FETCH $end
$var wire 1 "" clock $end
$var wire 1 6 ex_if_stall $end
$var wire 32 #" id_if_pcimd2ext [31:0] $end
$var wire 32 $" id_if_pcindex [31:0] $end
$var wire 32 %" id_if_rega [31:0] $end
$var wire 1 Q id_if_selpcsource $end
$var wire 2 &" id_if_selpctype [1:0] $end
$var wire 18 '" if_mc_addr [17:0] $end
$var wire 32 (" mc_if_data [31:0] $end
$var wire 1 g reset $end
$var reg 32 )" if_id_instruc [31:0] $end
$var reg 32 *" if_id_nextpc [31:0] $end
$var reg 1 +" if_mc_en $end
$var reg 32 ," pc [31:0] $end
$var reg 32 -" pc_anterior [31:0] $end
$upscope $end
$scope module MEMORY $end
$var wire 1 "" clock $end
$var wire 1 7 ex_mem_readmem $end
$var wire 32 ." ex_mem_regb [31:0] $end
$var wire 5 /" ex_mem_regdest [4:0] $end
$var wire 1 : ex_mem_selwsource $end
$var wire 32 0" ex_mem_wbvalue [31:0] $end
$var wire 1 < ex_mem_writemem $end
$var wire 1 = ex_mem_writereg $end
$var wire 1 1" ex_memread_mem $end
$var wire 1 2" ex_memwritemem $end
$var wire 18 3" mem_mc_addr [17:0] $end
$var wire 32 4" mem_mc_data [31:0] $end
$var wire 1 ^ mem_mc_en $end
$var wire 1 _ mem_mc_rw $end
$var wire 1 g reset $end
$var reg 5 5" mem_wb_regdest [4:0] $end
$var reg 32 6" mem_wb_wbvalue [31:0] $end
$var reg 1 7" mem_wb_writereg $end
$upscope $end
$scope module EXECUTE $end
$var wire 32 8" aluout [31:0] $end
$var wire 1 9" aluov $end
$var wire 1 "" clock $end
$var wire 1 :" compout $end
$var wire 3 ;" id_ex_aluop [2:0] $end
$var wire 32 <" id_ex_imedext [31:0] $end
$var wire 1 @ id_ex_readmem $end
$var wire 32 =" id_ex_rega [31:0] $end
$var wire 32 >" id_ex_regb [31:0] $end
$var wire 5 ?" id_ex_regdest [4:0] $end
$var wire 1 E id_ex_selalushift $end
$var wire 1 F id_ex_selimregb $end
$var wire 1 G id_ex_selwsource $end
$var wire 5 @" id_ex_shiftamt [4:0] $end
$var wire 2 A" id_ex_shiftop [1:0] $end
$var wire 1 J id_ex_unsig $end
$var wire 1 K id_ex_writemem $end
$var wire 1 L id_ex_writeov $end
$var wire 1 M id_ex_writereg $end
$var wire 1 g reset $end
$var wire 32 B" result [31:0] $end
$var reg 32 C" b [31:0] $end
$var reg 1 D" ex_if_stall $end
$var reg 1 E" ex_mem_readmem $end
$var reg 32 F" ex_mem_regb [31:0] $end
$var reg 5 G" ex_mem_regdest [4:0] $end
$var reg 1 H" ex_mem_selwsource $end
$var reg 32 I" ex_mem_wbvalue [31:0] $end
$var reg 1 J" ex_mem_writemem $end
$var reg 1 K" ex_mem_writereg $end
$scope module ALU $end
$var wire 32 L" a [31:0] $end
$var wire 32 M" b [31:0] $end
$var wire 3 N" op [2:0] $end
$var wire 1 J unsig $end
$var reg 32 O" aluout [31:0] $end
$var reg 1 P" compout $end
$var reg 1 Q" overflow $end
$upscope $end
$scope module SHIFTER $end
$var wire 32 R" in [31:0] $end
$var wire 5 S" shiftamt [4:0] $end
$var wire 2 T" shiftop [1:0] $end
$var reg 32 U" result [31:0] $end
$upscope $end
$upscope $end
$scope module DECODE $end
$var wire 5 V" addrc [4:0] $end
$var wire 3 W" aluop [2:0] $end
$var wire 1 X" alushift $end
$var wire 1 "" clock $end
$var wire 3 Y" compop [2:0] $end
$var wire 1 Z" compout $end
$var wire 32 [" datac [31:0] $end
$var wire 1 \" enc $end
$var wire 1 ]" ex_if_stall $end
$var wire 1 ^" ex_mem_readmem $end
$var wire 32 _" ex_mem_regb [31:0] $end
$var wire 5 `" ex_mem_regdest [4:0] $end
$var wire 1 a" ex_mem_selwsource $end
$var wire 32 b" ex_mem_wbvalue [31:0] $end
$var wire 1 c" ex_mem_writemem $end
$var wire 1 d" ex_mem_writereg $end
$var wire 32 e" id_ex_rega [31:0] $end
$var wire 32 f" id_ex_regb [31:0] $end
$var wire 5 g" id_ex_shiftamt [4:0] $end
$var wire 1 h" id_ex_writeovi $end
$var wire 32 i" id_if_pcimd2ext [31:0] $end
$var wire 32 j" id_if_pcindex [31:0] $end
$var wire 32 k" id_if_rega [31:0] $end
$var wire 1 Q id_if_selpcsource $end
$var wire 2 l" id_if_selpctype [1:0] $end
$var wire 5 m" id_reg_addra [4:0] $end
$var wire 5 n" id_reg_addrb [4:0] $end
$var wire 32 o" if_id_instruc [31:0] $end
$var wire 32 p" if_id_nextpc [31:0] $end
$var wire 18 q" if_mc_addr [17:0] $end
$var wire 1 r" if_mc_en $end
$var wire 32 s" mc_if_data [31:0] $end
$var wire 1 t" readmem $end
$var wire 32 u" reg_id_ass_dataa [31:0] $end
$var wire 32 v" reg_id_ass_datab [31:0] $end
$var wire 32 w" reg_id_dataa [31:0] $end
$var wire 32 x" reg_id_datab [31:0] $end
$var wire 1 g reset $end
$var wire 1 y" rgb $end
$var wire 2 z" selbrjumpz [1:0] $end
$var wire 2 {" selregdest [1:0] $end
$var wire 3 |" selwsource_helper [2:0] $end
$var wire 2 }" shiftop [1:0] $end
$var wire 1 ~" unsig $end
$var wire 1 !# writemem $end
$var wire 1 "# writeov $end
$var wire 1 ## writereg $end
$var reg 16 $# bit_extension [15:0] $end
$var reg 3 %# id_ex_aluop [2:0] $end
$var reg 32 &# id_ex_imedext [31:0] $end
$var reg 1 '# id_ex_readmem $end
$var reg 5 (# id_ex_regdest [4:0] $end
$var reg 1 )# id_ex_selalushift $end
$var reg 1 *# id_ex_selimregb $end
$var reg 1 +# id_ex_selwsource $end
$var reg 2 ,# id_ex_shiftop [1:0] $end
$var reg 1 -# id_ex_unsig $end
$var reg 1 .# id_ex_writemem $end
$var reg 1 /# id_ex_writeov $end
$var reg 1 0# id_ex_writereg $end
$scope module ControlModule $end
$var wire 6 1# fn [5:0] $end
$var wire 6 2# op [5:0] $end
$var reg 3 3# aluop [2:0] $end
$var reg 3 4# compop [2:0] $end
$var reg 1 5# readmem $end
$var reg 1 6# selalushift $end
$var reg 2 7# selbrjumpz [1:0] $end
$var reg 1 8# selimregb $end
$var reg 2 9# selpctype [1:0] $end
$var reg 2 :# selregdest [1:0] $end
$var reg 3 ;# selwsource [2:0] $end
$var reg 2 <# shiftop [1:0] $end
$var reg 1 =# unsig $end
$var reg 1 ># writemem $end
$var reg 1 ?# writeov $end
$var reg 1 @# writereg $end
$upscope $end
$scope module ComparatorModule $end
$var wire 32 A# a [31:0] $end
$var wire 32 B# b [31:0] $end
$var wire 3 C# op [2:0] $end
$var reg 1 D# compout $end
$upscope $end
$scope module FetchModule $end
$var wire 1 "" clock $end
$var wire 1 ]" ex_if_stall $end
$var wire 32 E# id_if_pcimd2ext [31:0] $end
$var wire 32 F# id_if_pcindex [31:0] $end
$var wire 32 G# id_if_rega [31:0] $end
$var wire 1 Q id_if_selpcsource $end
$var wire 2 H# id_if_selpctype [1:0] $end
$var wire 18 I# if_mc_addr [17:0] $end
$var wire 32 J# mc_if_data [31:0] $end
$var wire 1 g reset $end
$var reg 32 K# if_id_instruc [31:0] $end
$var reg 32 L# if_id_nextpc [31:0] $end
$var reg 1 M# if_mc_en $end
$var reg 32 N# pc [31:0] $end
$var reg 32 O# pc_anterior [31:0] $end
$upscope $end
$scope module RegisterModule $end
$var wire 5 P# addra [4:0] $end
$var wire 5 Q# addrb [4:0] $end
$var wire 5 R# addrc [4:0] $end
$var wire 1 "" clock $end
$var wire 32 S# datac [31:0] $end
$var wire 1 \" enc $end
$var wire 1 g reset $end
$var reg 32 T# ass_dataa [31:0] $end
$var reg 32 U# ass_datab [31:0] $end
$var reg 32 V# dataa [31:0] $end
$var reg 32 W# datab [31:0] $end
$scope begin RST[0] $end
$upscope $end
$scope begin RST[1] $end
$upscope $end
$scope begin RST[2] $end
$upscope $end
$scope begin RST[3] $end
$upscope $end
$scope begin RST[4] $end
$upscope $end
$scope begin RST[5] $end
$upscope $end
$scope begin RST[6] $end
$upscope $end
$scope begin RST[7] $end
$upscope $end
$scope begin RST[8] $end
$upscope $end
$scope begin RST[9] $end
$upscope $end
$scope begin RST[10] $end
$upscope $end
$scope begin RST[11] $end
$upscope $end
$scope begin RST[12] $end
$upscope $end
$scope begin RST[13] $end
$upscope $end
$scope begin RST[14] $end
$upscope $end
$scope begin RST[15] $end
$upscope $end
$scope begin RST[16] $end
$upscope $end
$scope begin RST[17] $end
$upscope $end
$scope begin RST[18] $end
$upscope $end
$scope begin RST[19] $end
$upscope $end
$scope begin RST[20] $end
$upscope $end
$scope begin RST[21] $end
$upscope $end
$scope begin RST[22] $end
$upscope $end
$scope begin RST[23] $end
$upscope $end
$scope begin RST[24] $end
$upscope $end
$scope begin RST[25] $end
$upscope $end
$scope begin RST[26] $end
$upscope $end
$scope begin RST[27] $end
$upscope $end
$scope begin RST[28] $end
$upscope $end
$scope begin RST[29] $end
$upscope $end
$scope begin RST[30] $end
$upscope $end
$scope begin RST[31] $end
$upscope $end
$upscope $end
$scope module ExecuteModule $end
$var wire 32 X# aluout [31:0] $end
$var wire 1 Y# aluov $end
$var wire 1 "" clock $end
$var wire 1 Z# compout $end
$var wire 3 [# id_ex_aluop [2:0] $end
$var wire 32 \# id_ex_imedext [31:0] $end
$var wire 1 @ id_ex_readmem $end
$var wire 32 ]# id_ex_rega [31:0] $end
$var wire 32 ^# id_ex_regb [31:0] $end
$var wire 5 _# id_ex_regdest [4:0] $end
$var wire 1 E id_ex_selalushift $end
$var wire 1 F id_ex_selimregb $end
$var wire 1 D id_ex_selwsource $end
$var wire 5 `# id_ex_shiftamt [4:0] $end
$var wire 2 a# id_ex_shiftop [1:0] $end
$var wire 1 J id_ex_unsig $end
$var wire 1 K id_ex_writemem $end
$var wire 1 h" id_ex_writeov $end
$var wire 1 M id_ex_writereg $end
$var wire 1 g reset $end
$var wire 32 b# result [31:0] $end
$var reg 32 c# b [31:0] $end
$var reg 1 d# ex_if_stall $end
$var reg 1 e# ex_mem_readmem $end
$var reg 32 f# ex_mem_regb [31:0] $end
$var reg 5 g# ex_mem_regdest [4:0] $end
$var reg 1 h# ex_mem_selwsource $end
$var reg 32 i# ex_mem_wbvalue [31:0] $end
$var reg 1 j# ex_mem_writemem $end
$var reg 1 k# ex_mem_writereg $end
$scope module ALU $end
$var wire 32 l# a [31:0] $end
$var wire 32 m# b [31:0] $end
$var wire 3 n# op [2:0] $end
$var wire 1 J unsig $end
$var reg 32 o# aluout [31:0] $end
$var reg 1 p# compout $end
$var reg 1 q# overflow $end
$upscope $end
$scope module SHIFTER $end
$var wire 32 r# in [31:0] $end
$var wire 5 s# shiftamt [4:0] $end
$var wire 2 t# shiftop [1:0] $end
$var reg 32 u# result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module WRITEBACK $end
$var wire 5 v# mem_wb_regdest [4:0] $end
$var wire 32 w# mem_wb_wbvalue [31:0] $end
$var wire 1 b mem_wb_writereg $end
$var wire 5 x# wb_reg_addr [4:0] $end
$var wire 32 y# wb_reg_data [31:0] $end
$var wire 1 j wb_reg_en $end
$upscope $end
$scope module REGISTERS $end
$var wire 5 z# addra [4:0] $end
$var wire 5 {# addrb [4:0] $end
$var wire 5 |# addrc [4:0] $end
$var wire 1 "" clock $end
$var wire 32 }# datac [31:0] $end
$var wire 1 j enc $end
$var wire 1 g reset $end
$var reg 32 ~# ass_dataa [31:0] $end
$var reg 32 !$ ass_datab [31:0] $end
$var reg 32 "$ dataa [31:0] $end
$var reg 32 #$ datab [31:0] $end
$scope begin RST[0] $end
$upscope $end
$scope begin RST[1] $end
$upscope $end
$scope begin RST[2] $end
$upscope $end
$scope begin RST[3] $end
$upscope $end
$scope begin RST[4] $end
$upscope $end
$scope begin RST[5] $end
$upscope $end
$scope begin RST[6] $end
$upscope $end
$scope begin RST[7] $end
$upscope $end
$scope begin RST[8] $end
$upscope $end
$scope begin RST[9] $end
$upscope $end
$scope begin RST[10] $end
$upscope $end
$scope begin RST[11] $end
$upscope $end
$scope begin RST[12] $end
$upscope $end
$scope begin RST[13] $end
$upscope $end
$scope begin RST[14] $end
$upscope $end
$scope begin RST[15] $end
$upscope $end
$scope begin RST[16] $end
$upscope $end
$scope begin RST[17] $end
$upscope $end
$scope begin RST[18] $end
$upscope $end
$scope begin RST[19] $end
$upscope $end
$scope begin RST[20] $end
$upscope $end
$scope begin RST[21] $end
$upscope $end
$scope begin RST[22] $end
$upscope $end
$scope begin RST[23] $end
$upscope $end
$scope begin RST[24] $end
$upscope $end
$scope begin RST[25] $end
$upscope $end
$scope begin RST[26] $end
$upscope $end
$scope begin RST[27] $end
$upscope $end
$scope begin RST[28] $end
$upscope $end
$scope begin RST[29] $end
$upscope $end
$scope begin RST[30] $end
$upscope $end
$scope begin RST[31] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx #$
bx "$
bx !$
bx ~#
b0 }#
b0 |#
b0 {#
b0 z#
b0 y#
b0 x#
b0 w#
b0 v#
bx u#
b0 t#
bx s#
bx r#
xq#
0p#
bx o#
b0 n#
bx m#
bx l#
0k#
xj#
b0 i#
0h#
b0 g#
b0 f#
0e#
0d#
bx c#
bx b#
b0 a#
bx `#
b0 _#
bx ^#
bx ]#
b0 \#
b0 [#
0Z#
xY#
bx X#
bx W#
bx V#
bx U#
bx T#
bz S#
bz R#
b0 Q#
b0 P#
b0 O#
b0 N#
0M#
b0 L#
b0 K#
bz J#
b0 I#
bz H#
bx G#
b0 F#
b0 E#
0D#
bz C#
bx B#
bx A#
1@#
1?#
0>#
x=#
b10 <#
b0 ;#
b1 :#
bx 9#
08#
b0 7#
16#
05#
bx 4#
bx 3#
b0 2#
b0 1#
00#
0/#
0.#
0-#
b0 ,#
0+#
0*#
0)#
b0 (#
0'#
b0 &#
b0 %#
b0 $#
1##
1"#
z!#
z~"
bz }"
b0 |"
b1 {"
bz z"
0y"
bx x"
bx w"
bx v"
bx u"
zt"
bz s"
0r"
b0 q"
b0 p"
b0 o"
b0 n"
b0 m"
bz l"
bx k"
b0 j"
b0 i"
zh"
bx g"
bx f"
bx e"
0d"
xc"
b0 b"
0a"
b0 `"
b0 _"
0^"
0]"
z\"
bz ["
0Z"
bz Y"
1X"
bz W"
bz V"
bx U"
b0 T"
bx S"
bx R"
xQ"
0P"
bx O"
b0 N"
bx M"
bx L"
0K"
xJ"
b0 I"
0H"
b0 G"
b0 F"
0E"
0D"
bx C"
bx B"
b0 A"
bx @"
b0 ?"
bx >"
bx ="
b0 <"
b0 ;"
0:"
x9"
bx 8"
07"
b0 6"
b0 5"
bx 4"
b0 3"
z2"
z1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
0+"
b0 *"
b0 )"
bx0000000000000000000000000000000 ("
b0 '"
bz &"
bx %"
b0 $"
b0 #"
1""
bx !"
bx ~
x}
bx |
0{
bx00000000000000000 z
0y
bx00000000000000000 x
bx0000000000000000000000000000000 w
bx0000000000000000000000000000000 v
bx000000000000000 u
b11111 t
bx s
b0 r
bx q
bx00000000000000000 p
bx0000000000000000000000000000000 o
b0 n
b0 m
b0 l
1k
0j
b0 i
b0 h
0g
bx f
bx e
bx d
bx c
0b
b0 a
b0 `
x_
x^
bx ]
b0 \
x[
bx00000000000000000 Z
bx0000000000000000000000000000000 Y
zX
b0 W
b0 V
b0 U
b0 T
b0 S
bz R
xQ
bx P
b0 O
b0 N
0M
0L
0K
0J
b0 I
bx H
zG
0F
0E
0D
b0 C
bx B
bx A
0@
b0 ?
b0 >
0=
x<
b0 ;
0:
b0 9
b0 8
07
06
bx 5
14
bx 3
bx 2
x1
bx 0
x/
x.
x-
bx ,
x+
bx *
x)
0(
x'
x&
x%
1$
x#
bx "
bx !
$end
#10
0$
04
#20
b0 "
bx00000000000000000 *
bx00000000000000000 3
bx0000000000000000000000000000000 w
bx0000000000000000000000000000000 v
bx000000000000000 u
bx00000000000000000 x
b11111 t
0k
0""
1$
14
#30
0$
04
#40
b0 u#
b0 b#
b0 U"
b0 B"
b0 o#
b0 X#
b0 O"
b0 8"
b0 H
b0 @"
b0 S"
b0 g"
b0 `#
b0 s#
b0 #$
b0 f
b0 x"
b0 B
b0 >"
b0 R"
b0 f"
b0 ^#
b0 r#
b0 "$
b0 e
b0 w"
b0 A
b0 ="
b0 L"
b0 e"
b0 ]#
b0 l#
b0 W#
b0 V#
bx0000000000000000000000000000000 w
bx0000000000000000000000000000000 v
bx000000000000000 u
bx00000000000000000 x
b11111 t
1k
1""
1$
14
#50
0$
04
#60
bx0000000000000000000000000000000 w
bx0000000000000000000000000000000 v
bx000000000000000 u
bx00000000000000000 x
b11111 t
0k
0""
1$
14
#70
0$
04
#80
bx0000000000000000000000000000000 w
bx0000000000000000000000000000000 v
bx000000000000000 u
bx00000000000000000 x
b11111 t
1k
1""
1$
14
#90
0$
04
#100
bx0000000000000000000000000000000 w
bx0000000000000000000000000000000 v
bx000000000000000 u
bx00000000000000000 x
b11111 t
0k
0""
1$
14
#110
0$
04
#120
bx0000000000000000000000000000000 w
bx0000000000000000000000000000000 v
bx000000000000000 u
bx00000000000000000 x
b11111 t
1k
1""
1$
14
#130
0$
04
#140
bx0000000000000000000000000000000 w
bx0000000000000000000000000000000 v
bx000000000000000 u
bx00000000000000000 x
b11111 t
0k
0""
1$
14
#150
0$
04
#160
bx0000000000000000000000000000000 w
bx0000000000000000000000000000000 v
bx000000000000000 u
bx00000000000000000 x
b11111 t
1k
1""
1$
14
#170
0$
04
#180
bx0000000000000000000000000000000 w
bx0000000000000000000000000000000 v
bx000000000000000 u
bx00000000000000000 x
b11111 t
0k
0""
1$
14
#190
0$
04
#200
bx0000000000000000000000000000000 w
bx0000000000000000000000000000000 v
bx000000000000000 u
bx00000000000000000 x
b11111 t
1k
1""
1$
14
#210
0$
04
#220
bx0000000000000000000000000000000 w
bx0000000000000000000000000000000 v
bx000000000000000 u
bx00000000000000000 x
b11111 t
0k
0""
1$
14
#230
0$
04
#240
bx0000000000000000000000000000000 w
bx0000000000000000000000000000000 v
bx000000000000000 u
bx00000000000000000 x
b11111 t
1k
1""
1$
14
#250
0$
04
#260
bx0000000000000000000000000000000 w
bx0000000000000000000000000000000 v
bx000000000000000 u
bx00000000000000000 x
b11111 t
0k
0""
1$
14
#270
0$
04
#280
bx0000000000000000000000000000000 w
bx0000000000000000000000000000000 v
bx000000000000000 u
bx00000000000000000 x
b11111 t
1k
1""
1$
14
#290
0$
04
#300
bx0000000000000000000000000000000 w
bx0000000000000000000000000000000 v
bx000000000000000 u
bx00000000000000000 x
b11111 t
0k
0""
1$
14
#310
0$
04
#320
bx0000000000000000000000000000000 w
bx0000000000000000000000000000000 v
bx000000000000000 u
bx00000000000000000 x
b11111 t
1k
1""
1$
14
#330
0$
04
#340
bx0000000000000000000000000000000 w
bx0000000000000000000000000000000 v
bx000000000000000 u
bx00000000000000000 x
b11111 t
0k
0""
1$
14
#350
0$
04
#360
bx0000000000000000000000000000000 w
bx0000000000000000000000000000000 v
bx000000000000000 u
bx00000000000000000 x
b11111 t
1k
1""
1$
14
#370
0$
04
#380
bx0000000000000000000000000000000 w
bx0000000000000000000000000000000 v
bx000000000000000 u
bx00000000000000000 x
b11111 t
0k
0""
1$
14
#390
0$
04
#400
bx0000000000000000000000000000000 w
bx0000000000000000000000000000000 v
bx000000000000000 u
bx00000000000000000 x
b11111 t
1k
1""
1$
14
