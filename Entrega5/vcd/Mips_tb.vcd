$date
	Thu Jun  5 13:27:42 2014
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Mips_tb $end
$var wire 18 ! addr [17:0] $end
$var wire 1 " chip_en $end
$var wire 16 # data [15:0] $end
$var wire 1 $ hb_mask $end
$var wire 1 % lb_mask $end
$var wire 1 & oute $end
$var wire 1 ' wre $end
$var reg 1 ( clk $end
$var integer 32 ) i [31:0] $end
$var reg 1 * rst $end
$scope module RAM $end
$var wire 18 + addr [17:0] $end
$var wire 1 " chip_en $end
$var wire 16 , data [15:0] $end
$var wire 1 $ hb_mask $end
$var wire 1 % lb_mask $end
$var wire 1 & oute $end
$var wire 16 - q [15:0] $end
$var wire 1 ' wre $end
$var reg 16 . d [15:0] $end
$upscope $end
$scope module MIPS $end
$var wire 18 / addr [17:0] $end
$var wire 1 " chip_en $end
$var wire 1 0 clock $end
$var wire 16 1 data [15:0] $end
$var wire 1 2 ex_if_stall $end
$var wire 1 3 ex_mem_readmem $end
$var wire 32 4 ex_mem_regb [31:0] $end
$var wire 5 5 ex_mem_regdest [4:0] $end
$var wire 1 6 ex_mem_selwsource $end
$var wire 32 7 ex_mem_wbvalue [31:0] $end
$var wire 1 8 ex_mem_writemem $end
$var wire 1 9 ex_mem_writereg $end
$var wire 1 $ hb_mask $end
$var wire 3 : id_ex_aluop [2:0] $end
$var wire 32 ; id_ex_imedext [31:0] $end
$var wire 1 < id_ex_readmem $end
$var wire 32 = id_ex_rega [31:0] $end
$var wire 32 > id_ex_regb [31:0] $end
$var wire 5 ? id_ex_regdest [4:0] $end
$var wire 1 @ id_ex_se $end
$var wire 1 A id_ex_selalushift $end
$var wire 1 B id_ex_selimregb $end
$var wire 1 C id_ex_selwsource $end
$var wire 5 D id_ex_shiftamt [4:0] $end
$var wire 2 E id_ex_shiftop [1:0] $end
$var wire 1 F id_ex_unsig $end
$var wire 1 G id_ex_writemem $end
$var wire 1 H id_ex_writeov $end
$var wire 1 I id_ex_writereg $end
$var wire 32 J id_if_pcimd2ext [31:0] $end
$var wire 32 K id_if_pcindex [31:0] $end
$var wire 32 L id_if_rega [31:0] $end
$var wire 1 M id_if_selpcsource $end
$var wire 2 N id_if_selpctype [1:0] $end
$var wire 5 O id_reg_addra [4:0] $end
$var wire 5 P id_reg_addrb [4:0] $end
$var wire 32 Q if_id_instruc [31:0] $end
$var wire 32 R if_id_nextpc [31:0] $end
$var wire 18 S if_mc_addr [17:0] $end
$var wire 1 T if_mc_en $end
$var wire 1 % lb_mask $end
$var wire 32 U mc_if_data [31:0] $end
$var wire 18 V mc_ram_addr [17:0] $end
$var wire 1 W mc_ram_wre $end
$var wire 18 X mem_mc_addr [17:0] $end
$var wire 32 Y mem_mc_data [31:0] $end
$var wire 1 Z mem_mc_en $end
$var wire 1 [ mem_mc_rw $end
$var wire 5 \ mem_wb_regdest [4:0] $end
$var wire 32 ] mem_wb_wbvalue [31:0] $end
$var wire 1 ^ mem_wb_writereg $end
$var wire 1 & oute $end
$var wire 32 _ reg_id_ass_dataa [31:0] $end
$var wire 32 ` reg_id_ass_datab [31:0] $end
$var wire 32 a reg_id_dataa [31:0] $end
$var wire 32 b reg_id_datab [31:0] $end
$var wire 1 c reset $end
$var wire 5 d wb_reg_addr [4:0] $end
$var wire 32 e wb_reg_data [31:0] $end
$var wire 1 f wb_reg_en $end
$var wire 1 ' wre $end
$var reg 1 g clock_div $end
$var integer 32 h contador0 [31:0] $end
$var integer 32 i contador1 [31:0] $end
$scope module MEMCONTROLLER $end
$var wire 1 0 clock $end
$var wire 18 j if_mc_addr [17:0] $end
$var wire 1 T if_mc_en $end
$var wire 18 k mc_ram_addr [17:0] $end
$var wire 16 l mc_ram_data [15:0] $end
$var wire 1 W mc_ram_wre $end
$var wire 18 m mem_mc_addr [17:0] $end
$var wire 32 n mem_mc_data [31:0] $end
$var wire 1 Z mem_mc_en $end
$var wire 1 [ mem_mc_rw $end
$var wire 1 c reset $end
$var reg 1 o counter $end
$var reg 32 p mc_if_data [31:0] $end
$var reg 32 q mem_data [31:0] $end
$var reg 16 r ram_data [15:0] $end
$upscope $end
$scope module FETCH $end
$var wire 1 s clock $end
$var wire 1 2 ex_if_stall $end
$var wire 32 t id_if_pcimd2ext [31:0] $end
$var wire 32 u id_if_pcindex [31:0] $end
$var wire 32 v id_if_rega [31:0] $end
$var wire 1 M id_if_selpcsource $end
$var wire 2 w id_if_selpctype [1:0] $end
$var wire 18 x if_mc_addr [17:0] $end
$var wire 32 y mc_if_data [31:0] $end
$var wire 1 c reset $end
$var reg 32 z if_id_instruc [31:0] $end
$var reg 32 { if_id_nextpc [31:0] $end
$var reg 1 | if_mc_en $end
$var reg 32 } pc [31:0] $end
$var reg 32 ~ pc_anterior [31:0] $end
$upscope $end
$scope module MEMORY $end
$var wire 1 s clock $end
$var wire 1 3 ex_mem_readmem $end
$var wire 32 !" ex_mem_regb [31:0] $end
$var wire 5 "" ex_mem_regdest [4:0] $end
$var wire 1 6 ex_mem_selwsource $end
$var wire 32 #" ex_mem_wbvalue [31:0] $end
$var wire 1 8 ex_mem_writemem $end
$var wire 1 9 ex_mem_writereg $end
$var wire 1 $" ex_memread_mem $end
$var wire 1 %" ex_memwritemem $end
$var wire 18 &" mem_mc_addr [17:0] $end
$var wire 32 '" mem_mc_data [31:0] $end
$var wire 1 Z mem_mc_en $end
$var wire 1 [ mem_mc_rw $end
$var wire 1 c reset $end
$var reg 5 (" mem_wb_regdest [4:0] $end
$var reg 32 )" mem_wb_wbvalue [31:0] $end
$var reg 1 *" mem_wb_writereg $end
$upscope $end
$scope module EXECUTE $end
$var wire 32 +" aluout [31:0] $end
$var wire 1 ," aluov $end
$var wire 1 s clock $end
$var wire 1 -" compout $end
$var wire 3 ." id_ex_aluop [2:0] $end
$var wire 32 /" id_ex_imedext [31:0] $end
$var wire 1 < id_ex_readmem $end
$var wire 32 0" id_ex_rega [31:0] $end
$var wire 32 1" id_ex_regb [31:0] $end
$var wire 5 2" id_ex_regdest [4:0] $end
$var wire 1 A id_ex_selalushift $end
$var wire 1 B id_ex_selimregb $end
$var wire 1 C id_ex_selwsource $end
$var wire 5 3" id_ex_shiftamt [4:0] $end
$var wire 2 4" id_ex_shiftop [1:0] $end
$var wire 1 F id_ex_unsig $end
$var wire 1 G id_ex_writemem $end
$var wire 1 H id_ex_writeov $end
$var wire 1 I id_ex_writereg $end
$var wire 1 c reset $end
$var wire 32 5" result [31:0] $end
$var reg 32 6" b [31:0] $end
$var reg 1 7" ex_if_stall $end
$var reg 1 8" ex_mem_readmem $end
$var reg 32 9" ex_mem_regb [31:0] $end
$var reg 5 :" ex_mem_regdest [4:0] $end
$var reg 1 ;" ex_mem_selwsource $end
$var reg 32 <" ex_mem_wbvalue [31:0] $end
$var reg 1 =" ex_mem_writemem $end
$var reg 1 >" ex_mem_writereg $end
$scope module ALU $end
$var wire 32 ?" a [31:0] $end
$var wire 32 @" b [31:0] $end
$var wire 3 A" op [2:0] $end
$var wire 1 F unsig $end
$var reg 32 B" aluout [31:0] $end
$var reg 1 C" compout $end
$var reg 1 D" overflow $end
$upscope $end
$scope module SHIFTER $end
$var wire 32 E" in [31:0] $end
$var wire 5 F" shiftamt [4:0] $end
$var wire 2 G" shiftop [1:0] $end
$var reg 32 H" result [31:0] $end
$upscope $end
$upscope $end
$scope module DECODE $end
$var wire 5 I" addrc [4:0] $end
$var wire 3 J" aluop [2:0] $end
$var wire 1 K" alushift $end
$var wire 1 s clock $end
$var wire 3 L" compop [2:0] $end
$var wire 1 M" compout $end
$var wire 32 N" datac [31:0] $end
$var wire 1 O" enc $end
$var wire 1 P" ex_if_stall $end
$var wire 1 Q" ex_mem_readmem $end
$var wire 32 R" ex_mem_regb [31:0] $end
$var wire 5 S" ex_mem_regdest [4:0] $end
$var wire 1 T" ex_mem_selwsource $end
$var wire 32 U" ex_mem_wbvalue [31:0] $end
$var wire 1 V" ex_mem_writemem $end
$var wire 1 W" ex_mem_writereg $end
$var wire 32 X" id_ex_rega [31:0] $end
$var wire 32 Y" id_ex_regb [31:0] $end
$var wire 5 Z" id_ex_shiftamt [4:0] $end
$var wire 1 [" id_ex_writeovi $end
$var wire 32 \" id_if_pcimd2ext [31:0] $end
$var wire 32 ]" id_if_pcindex [31:0] $end
$var wire 32 ^" id_if_rega [31:0] $end
$var wire 1 M id_if_selpcsource $end
$var wire 2 _" id_if_selpctype [1:0] $end
$var wire 5 `" id_reg_addra [4:0] $end
$var wire 5 a" id_reg_addrb [4:0] $end
$var wire 32 b" if_id_instruc [31:0] $end
$var wire 32 c" if_id_nextpc [31:0] $end
$var wire 18 d" if_mc_addr [17:0] $end
$var wire 1 e" if_mc_en $end
$var wire 32 f" mc_if_data [31:0] $end
$var wire 1 g" readmem $end
$var wire 32 h" reg_id_ass_dataa [31:0] $end
$var wire 32 i" reg_id_ass_datab [31:0] $end
$var wire 32 j" reg_id_dataa [31:0] $end
$var wire 32 k" reg_id_datab [31:0] $end
$var wire 1 c reset $end
$var wire 1 l" rgb $end
$var wire 2 m" selbrjumpz [1:0] $end
$var wire 2 n" selregdest [1:0] $end
$var wire 3 o" selwsource_helper [2:0] $end
$var wire 2 p" shiftop [1:0] $end
$var wire 1 q" unsig $end
$var wire 1 r" writemem $end
$var wire 1 s" writeov $end
$var wire 1 t" writereg $end
$var reg 16 u" bit_extension [15:0] $end
$var reg 3 v" id_ex_aluop [2:0] $end
$var reg 32 w" id_ex_imedext [31:0] $end
$var reg 1 x" id_ex_readmem $end
$var reg 5 y" id_ex_regdest [4:0] $end
$var reg 1 z" id_ex_selalushift $end
$var reg 1 {" id_ex_selimregb $end
$var reg 1 |" id_ex_selwsource $end
$var reg 2 }" id_ex_shiftop [1:0] $end
$var reg 1 ~" id_ex_unsig $end
$var reg 1 !# id_ex_writemem $end
$var reg 1 "# id_ex_writeov $end
$var reg 1 ## id_ex_writereg $end
$scope module ControlModule $end
$var wire 6 $# fn [5:0] $end
$var wire 6 %# op [5:0] $end
$var reg 3 &# aluop [2:0] $end
$var reg 3 '# compop [2:0] $end
$var reg 1 (# readmem $end
$var reg 1 )# selalushift $end
$var reg 2 *# selbrjumpz [1:0] $end
$var reg 1 +# selimregb $end
$var reg 2 ,# selpctype [1:0] $end
$var reg 2 -# selregdest [1:0] $end
$var reg 3 .# selwsource [2:0] $end
$var reg 2 /# shiftop [1:0] $end
$var reg 1 0# unsig $end
$var reg 1 1# writemem $end
$var reg 1 2# writeov $end
$var reg 1 3# writereg $end
$upscope $end
$scope module RegisterModule $end
$var wire 5 4# addra [4:0] $end
$var wire 5 5# addrb [4:0] $end
$var wire 5 6# addrc [4:0] $end
$var wire 5 7# addrout [4:0] $end
$var wire 1 s clock $end
$var wire 32 8# datac [31:0] $end
$var wire 1 O" enc $end
$var wire 32 9# regout [31:0] $end
$var wire 1 c reset $end
$var reg 32 :# ass_dataa [31:0] $end
$var reg 32 ;# ass_datab [31:0] $end
$var reg 32 <# dataa [31:0] $end
$var reg 32 =# datab [31:0] $end
$scope begin RST[0] $end
$upscope $end
$scope begin RST[1] $end
$upscope $end
$scope begin RST[2] $end
$upscope $end
$scope begin RST[3] $end
$upscope $end
$scope begin RST[4] $end
$upscope $end
$scope begin RST[5] $end
$upscope $end
$scope begin RST[6] $end
$upscope $end
$scope begin RST[7] $end
$upscope $end
$scope begin RST[8] $end
$upscope $end
$scope begin RST[9] $end
$upscope $end
$scope begin RST[10] $end
$upscope $end
$scope begin RST[11] $end
$upscope $end
$scope begin RST[12] $end
$upscope $end
$scope begin RST[13] $end
$upscope $end
$scope begin RST[14] $end
$upscope $end
$scope begin RST[15] $end
$upscope $end
$scope begin RST[16] $end
$upscope $end
$scope begin RST[17] $end
$upscope $end
$scope begin RST[18] $end
$upscope $end
$scope begin RST[19] $end
$upscope $end
$scope begin RST[20] $end
$upscope $end
$scope begin RST[21] $end
$upscope $end
$scope begin RST[22] $end
$upscope $end
$scope begin RST[23] $end
$upscope $end
$scope begin RST[24] $end
$upscope $end
$scope begin RST[25] $end
$upscope $end
$scope begin RST[26] $end
$upscope $end
$scope begin RST[27] $end
$upscope $end
$scope begin RST[28] $end
$upscope $end
$scope begin RST[29] $end
$upscope $end
$scope begin RST[30] $end
$upscope $end
$scope begin RST[31] $end
$upscope $end
$upscope $end
$scope module ComparatorModule $end
$var wire 32 ># a [31:0] $end
$var wire 32 ?# b [31:0] $end
$var wire 3 @# op [2:0] $end
$var reg 1 A# compout $end
$upscope $end
$scope module FetchModule $end
$var wire 1 s clock $end
$var wire 1 P" ex_if_stall $end
$var wire 32 B# id_if_pcimd2ext [31:0] $end
$var wire 32 C# id_if_pcindex [31:0] $end
$var wire 32 D# id_if_rega [31:0] $end
$var wire 1 M id_if_selpcsource $end
$var wire 2 E# id_if_selpctype [1:0] $end
$var wire 18 F# if_mc_addr [17:0] $end
$var wire 32 G# mc_if_data [31:0] $end
$var wire 1 c reset $end
$var reg 32 H# if_id_instruc [31:0] $end
$var reg 32 I# if_id_nextpc [31:0] $end
$var reg 1 J# if_mc_en $end
$var reg 32 K# pc [31:0] $end
$var reg 32 L# pc_anterior [31:0] $end
$upscope $end
$scope module ExecuteModule $end
$var wire 32 M# aluout [31:0] $end
$var wire 1 N# aluov $end
$var wire 1 s clock $end
$var wire 1 O# compout $end
$var wire 3 P# id_ex_aluop [2:0] $end
$var wire 32 Q# id_ex_imedext [31:0] $end
$var wire 1 < id_ex_readmem $end
$var wire 32 R# id_ex_rega [31:0] $end
$var wire 32 S# id_ex_regb [31:0] $end
$var wire 5 T# id_ex_regdest [4:0] $end
$var wire 1 A id_ex_selalushift $end
$var wire 1 l" id_ex_selimregb $end
$var wire 1 @ id_ex_selwsource $end
$var wire 5 U# id_ex_shiftamt [4:0] $end
$var wire 2 V# id_ex_shiftop [1:0] $end
$var wire 1 F id_ex_unsig $end
$var wire 1 G id_ex_writemem $end
$var wire 1 [" id_ex_writeov $end
$var wire 1 I id_ex_writereg $end
$var wire 1 c reset $end
$var wire 32 W# result [31:0] $end
$var reg 32 X# b [31:0] $end
$var reg 1 Y# ex_if_stall $end
$var reg 1 Z# ex_mem_readmem $end
$var reg 32 [# ex_mem_regb [31:0] $end
$var reg 5 \# ex_mem_regdest [4:0] $end
$var reg 1 ]# ex_mem_selwsource $end
$var reg 32 ^# ex_mem_wbvalue [31:0] $end
$var reg 1 _# ex_mem_writemem $end
$var reg 1 `# ex_mem_writereg $end
$scope module ALU $end
$var wire 32 a# a [31:0] $end
$var wire 32 b# b [31:0] $end
$var wire 3 c# op [2:0] $end
$var wire 1 F unsig $end
$var reg 32 d# aluout [31:0] $end
$var reg 1 e# compout $end
$var reg 1 f# overflow $end
$upscope $end
$scope module SHIFTER $end
$var wire 32 g# in [31:0] $end
$var wire 5 h# shiftamt [4:0] $end
$var wire 2 i# shiftop [1:0] $end
$var reg 32 j# result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module WRITEBACK $end
$var wire 5 k# mem_wb_regdest [4:0] $end
$var wire 32 l# mem_wb_wbvalue [31:0] $end
$var wire 1 ^ mem_wb_writereg $end
$var wire 5 m# wb_reg_addr [4:0] $end
$var wire 32 n# wb_reg_data [31:0] $end
$var wire 1 f wb_reg_en $end
$upscope $end
$scope module REGISTERS $end
$var wire 5 o# addra [4:0] $end
$var wire 5 p# addrb [4:0] $end
$var wire 5 q# addrc [4:0] $end
$var wire 5 r# addrout [4:0] $end
$var wire 1 s clock $end
$var wire 32 s# datac [31:0] $end
$var wire 1 f enc $end
$var wire 32 t# regout [31:0] $end
$var wire 1 c reset $end
$var reg 32 u# ass_dataa [31:0] $end
$var reg 32 v# ass_datab [31:0] $end
$var reg 32 w# dataa [31:0] $end
$var reg 32 x# datab [31:0] $end
$scope begin RST[0] $end
$upscope $end
$scope begin RST[1] $end
$upscope $end
$scope begin RST[2] $end
$upscope $end
$scope begin RST[3] $end
$upscope $end
$scope begin RST[4] $end
$upscope $end
$scope begin RST[5] $end
$upscope $end
$scope begin RST[6] $end
$upscope $end
$scope begin RST[7] $end
$upscope $end
$scope begin RST[8] $end
$upscope $end
$scope begin RST[9] $end
$upscope $end
$scope begin RST[10] $end
$upscope $end
$scope begin RST[11] $end
$upscope $end
$scope begin RST[12] $end
$upscope $end
$scope begin RST[13] $end
$upscope $end
$scope begin RST[14] $end
$upscope $end
$scope begin RST[15] $end
$upscope $end
$scope begin RST[16] $end
$upscope $end
$scope begin RST[17] $end
$upscope $end
$scope begin RST[18] $end
$upscope $end
$scope begin RST[19] $end
$upscope $end
$scope begin RST[20] $end
$upscope $end
$scope begin RST[21] $end
$upscope $end
$scope begin RST[22] $end
$upscope $end
$scope begin RST[23] $end
$upscope $end
$scope begin RST[24] $end
$upscope $end
$scope begin RST[25] $end
$upscope $end
$scope begin RST[26] $end
$upscope $end
$scope begin RST[27] $end
$upscope $end
$scope begin RST[28] $end
$upscope $end
$scope begin RST[29] $end
$upscope $end
$scope begin RST[30] $end
$upscope $end
$scope begin RST[31] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 y# \memory[0] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 z# \memory[1] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 {# \memory[2] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 |# \memory[3] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 }# \memory[4] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 ~# \memory[5] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 !$ \memory[6] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 "$ \memory[7] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 #$ \memory[8] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 $$ \memory[9] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 %$ \memory[10] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 &$ \memory[11] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 '$ \memory[12] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 ($ \memory[13] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 )$ \memory[14] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 *$ \memory[15] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 +$ \memory[16] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 ,$ \memory[17] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 -$ \memory[18] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 .$ \memory[19] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 /$ \memory[20] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 0$ \memory[21] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 1$ \memory[22] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 2$ \memory[23] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 3$ \memory[24] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 4$ \memory[25] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 5$ \memory[26] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 6$ \memory[27] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 7$ \memory[28] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 8$ \memory[29] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 9$ \memory[30] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 :$ \memory[31] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 ;$ \memory[32] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 <$ \memory[33] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 =$ \memory[34] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 >$ \memory[35] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 ?$ \memory[36] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 @$ \memory[37] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 A$ \memory[38] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 B$ \memory[39] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 C$ \memory[40] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 D$ \memory[41] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 E$ \memory[42] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 F$ \memory[43] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 G$ \memory[44] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 H$ \memory[45] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 I$ \memory[46] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 J$ \memory[47] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 K$ \memory[48] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 L$ \memory[49] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 M$ \memory[50] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 N$ \memory[51] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 O$ \memory[52] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 P$ \memory[53] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 Q$ \memory[54] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 R$ \memory[55] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 S$ \memory[56] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 T$ \memory[57] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 U$ \memory[58] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 V$ \memory[59] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 W$ \memory[60] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 X$ \memory[61] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 Y$ \memory[62] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 Z$ \memory[63] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 [$ \memory[64] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 \$ \memory[65] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 ]$ \memory[66] [15:0] $end
$upscope $end
$upscope $end
$scope module Mips_tb $end
$scope module RAM $end
$var reg 16 ^$ \memory[67] [15:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1011100 ^$
b1010110000010010 ]$
b1011010 \$
b1010110000010001 [$
b1011000 Z$
b1010110000010000 Y$
b1010110 X$
b1010110000001111 W$
b1010100 V$
b1010110000001110 U$
b1010010 T$
b1010110000001101 S$
b1010000 R$
b1010110000001100 Q$
b1001110 P$
b1010110000001001 O$
b1001100 N$
b1010110000001000 M$
b1001010 L$
b1010110000000111 K$
b1001000 J$
b1010110000000110 I$
b1000110 H$
b1010110000000101 G$
b1000100 F$
b1010110000000100 E$
b1000111 D$
b0 C$
b1000110 B$
b0 A$
b1000100 @$
b0 ?$
b101 >$
b11100101101111 =$
b101 <$
b11010101101110 ;$
b101 :$
b11000101101101 9$
b101 8$
b10000101101100 7$
b100100000100111 6$
b101100101 5$
b100000000100110 4$
b101100101 3$
b11100000100101 2$
b101100101 1$
b11000000100100 0$
b101100101 /$
b10000000100010 .$
b101101010 -$
b1111111111111100 ,$
b1010010101010 +$
b10100000100000 *$
b10100001 )$
b110 ($
b1011110000001011 '$
b100 &$
b1011110000001010 %$
b10 $$
b1011110000000001 #$
b111101111001110 "$
b110 !$
b1001010 ~#
b0 }#
b1 |#
b0 {#
b110 z#
b100000000000 y#
bx x#
bx w#
b0 v#
b0 u#
bx t#
b0 s#
bz r#
b0 q#
b0 p#
b0 o#
b0 n#
b0 m#
b0 l#
b0 k#
bx j#
b0 i#
bx h#
bx g#
xf#
0e#
bx d#
b0 c#
bx b#
bx a#
0`#
x_#
b0 ^#
0]#
b0 \#
b0 [#
0Z#
0Y#
bx X#
bx W#
b0 V#
bx U#
b0 T#
bx S#
bx R#
b0 Q#
b0 P#
0O#
xN#
bx M#
b0 L#
b0 K#
0J#
b0 I#
b0 H#
bz G#
b0 F#
bx E#
b0 D#
b0 C#
b0 B#
0A#
bx @#
b0 ?#
b0 >#
bx =#
bx <#
b0 ;#
b0 :#
bx 9#
bz 8#
bz 7#
bz 6#
b0 5#
b0 4#
13#
12#
01#
x0#
b10 /#
b0 .#
b1 -#
bx ,#
0+#
b0 *#
1)#
0(#
bx '#
bx &#
b0 %#
b0 $#
0##
0"#
0!#
0~"
b0 }"
0|"
0{"
0z"
b0 y"
0x"
b0 w"
b0 v"
b0 u"
1t"
1s"
0r"
xq"
b10 p"
b0 o"
b1 n"
b0 m"
0l"
bx k"
bx j"
b0 i"
b0 h"
0g"
bz f"
0e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
bx _"
b0 ^"
b0 ]"
b0 \"
z["
bx Z"
bx Y"
bx X"
0W"
xV"
b0 U"
0T"
b0 S"
b0 R"
0Q"
0P"
zO"
bz N"
0M"
bx L"
1K"
bx J"
bz I"
bx H"
b0 G"
bx F"
bx E"
xD"
0C"
bx B"
b0 A"
bx @"
bx ?"
0>"
x="
b0 <"
0;"
b0 :"
b0 9"
08"
07"
bx 6"
bx 5"
b0 4"
bx 3"
b0 2"
bx 1"
bx 0"
b0 /"
b0 ."
0-"
x,"
bx +"
0*"
b0 )"
b0 ("
bx '"
b0 &"
z%"
z$"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
0|
b0 {
b0 z
b0 y
b0 x
bx w
b0 v
b0 u
b0 t
1s
bx r
bx q
b0 p
0o
bx n
b0 m
bx l
bx k
b0 j
b0 i
b0 h
1g
0f
b0 e
b0 d
0c
bx b
bx a
b0 `
b0 _
0^
b0 ]
b0 \
x[
xZ
bx Y
b0 X
xW
bx V
b0 U
zT
b0 S
b0 R
b0 Q
b0 P
b0 O
bx N
0M
b0 L
b0 K
b0 J
0I
0H
0G
0F
b0 E
bx D
zC
0B
0A
0@
b0 ?
bx >
bx =
0<
b0 ;
b0 :
09
x8
b0 7
06
b0 5
b0 4
03
02
bx 1
10
bx /
bx .
bx -
bx ,
bx +
0*
b1000100 )
1(
x'
0&
0%
0$
bx #
0"
bx !
$end
#10
1*
1c
#15
0(
00
#20
1o
0g
0s
1(
10
#25
0(
00
#30
b0 H"
b0 5"
b0 j#
b0 W#
b0 d#
b0 M#
b0 B"
b0 +"
b10 V
b10 k
b0 -
b10 !
b10 +
b10 /
0Z
b0 D
b0 3"
b0 F"
b0 Z"
b0 U#
b0 h#
b100 d"
b100 F#
bx X
bx m
bx &"
b100 S
b100 j
b100 x
b0 x#
b0 b
b0 k"
b0 >
b0 1"
b0 E"
b0 Y"
b0 S#
b0 g#
b0 w#
b0 a
b0 j"
b0 =
b0 0"
b0 ?"
b0 X"
b0 R#
b0 a#
b0 =#
b0 <#
x~"
xF
b10 }"
b10 E
b10 4"
b10 G"
b10 V#
b10 i#
bx v"
bx :
bx ."
bx A"
bx P#
bx c#
1"#
1H
1##
1I
1z"
1A
bx ^#
bx U"
bx [#
bx R"
0_#
0V"
b100 K#
bx <"
bx 7
bx #"
z;"
z6
bx 9"
bx 4
bx !"
0="
08
b100 }
0o
1g
1s
1(
10
#35
0(
00
#40
bx V
bx k
bx -
bx !
bx +
bx /
1o
0g
0s
1(
10
#45
0(
00
#50
b100 V
b100 k
b0 -
b100 !
b100 +
b100 /
b1000 S
b1000 j
b1000 x
b0 X
b0 m
b0 &"
b1000 d"
b1000 F#
b10000 J
b10000 t
b10000 \"
b10000 B#
b1000 }
b100 {
b100 ~
bx )"
bx e
bx n#
bx s#
bx ]
bx l#
b0 6"
b0 @"
b0 <"
b0 7
b0 #"
1>"
19
b0 9"
b0 4
b0 !"
b1000 K#
b100 I#
b100 R
b100 c"
b100 L#
b0 X#
b0 b#
b0 ^#
b0 U"
x`#
xW"
b0 [#
b0 R"
0o
1g
1s
1(
10
#55
0(
00
#60
bx V
bx k
bx -
bx !
bx +
bx /
1o
0g
0s
1(
10
#65
0(
00
#70
b110 V
b110 k
b110 -
b110 !
b110 +
b110 /
b1100 d"
b1100 F#
b1100 S
b1100 j
b1100 x
b100000 J
b100000 t
b100000 \"
b100000 B#
b1100 K#
b1000 I#
b1000 L#
b0 )"
b0 e
b0 n#
b0 s#
b0 ]
b0 l#
1*"
1f
1^
b1100 }
b1000 {
b1000 R
b1000 c"
b1000 ~
0o
1g
1s
1(
10
#75
0(
00
#80
bx V
bx k
bx -
bx !
bx +
bx /
1o
0g
0s
1(
10
#85
0(
00
#90
b1000 V
b1000 k
b1011110000000001 -
b1000 !
b1000 +
b1000 /
b10000 S
b10000 j
b10000 x
b10000 d"
b10000 F#
b110000 J
b110000 t
b110000 \"
b110000 B#
b10000 }
b1100 {
b1100 ~
b10000 K#
b1100 I#
b1100 R
b1100 c"
b1100 L#
0o
1g
1s
1(
10
#95
0(
00
#100
bx V
bx k
bx -
bx !
bx +
bx /
1o
0g
0s
1(
10
#105
0(
00
#110
b1010 V
b1010 k
b1011110000001010 -
b1010 !
b1010 +
b1010 /
b10100 d"
b10100 F#
b10100 S
b10100 j
b10100 x
b1000000 J
b1000000 t
b1000000 \"
b1000000 B#
b10100 K#
b10000 I#
b10000 L#
b10100 }
b10000 {
b10000 R
b10000 c"
b10000 ~
0o
1g
1s
1(
10
#115
0(
00
#120
bx V
bx k
bx -
bx !
bx +
bx /
1o
0g
0s
1(
10
#125
0(
00
#130
b1100 V
b1100 k
b1011110000001011 -
b1100 !
b1100 +
b1100 /
b11000 S
b11000 j
b11000 x
b11000 d"
b11000 F#
b1010000 J
b1010000 t
b1010000 \"
b1010000 B#
b11000 }
b10100 {
b10100 ~
b11000 K#
b10100 I#
b10100 R
b10100 c"
b10100 L#
0o
1g
1s
1(
10
#135
0(
00
#140
bx V
bx k
bx -
bx !
bx +
bx /
1o
0g
0s
1(
10
#145
0(
00
#150
b1110 V
b1110 k
b10100001 -
b1110 !
b1110 +
b1110 /
b11100 d"
b11100 F#
b11100 S
b11100 j
b11100 x
b1100000 J
b1100000 t
b1100000 \"
b1100000 B#
b11100 K#
b11000 I#
b11000 L#
b11100 }
b11000 {
b11000 R
b11000 c"
b11000 ~
0o
1g
1s
1(
10
#155
0(
00
#160
bx V
bx k
bx -
bx !
bx +
bx /
1o
0g
0s
1(
10
#165
0(
00
#170
b10000 V
b10000 k
b1010010101010 -
b10000 !
b10000 +
b10000 /
b100000 S
b100000 j
b100000 x
b100000 d"
b100000 F#
b1110000 J
b1110000 t
b1110000 \"
b1110000 B#
b100000 }
b11100 {
b11100 ~
b100000 K#
b11100 I#
b11100 R
b11100 c"
b11100 L#
0o
1g
1s
1(
10
#175
0(
00
#180
bx V
bx k
bx -
bx !
bx +
bx /
1o
0g
0s
1(
10
#185
0(
00
#190
b10010 V
b10010 k
b101101010 -
b10010 !
b10010 +
b10010 /
b100100 d"
b100100 F#
b100100 S
b100100 j
b100100 x
b10000000 J
b10000000 t
b10000000 \"
b10000000 B#
b100100 K#
b100000 I#
b100000 L#
b100100 }
b100000 {
b100000 R
b100000 c"
b100000 ~
0o
1g
1s
1(
10
#195
0(
00
#200
bx V
bx k
bx -
bx !
bx +
bx /
1o
0g
0s
1(
10
